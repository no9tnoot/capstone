# Molly Ryan
# 11 August 2023
# Marker Class

import mysql.connector

""" Class that compares the equivalence of MySQL queries."""
class Marker:
    
    def __init__(self,db):
        self.database = db
    
    """
        Checks if the studentQuery returns the same output as the modalQuery. Returns an array,
        wherein the first item is a Boolean indicating True if the outputs are identical. If False,
        a second item in the array is a string communicating if the studentQuery is valid and produced
        an incorrect output, or if it is invalid and the server threw an error.
    """
    def markQuery(self, studentQuery, modalQuery):
        database = mysql.connector.connect(
            host=self.database.host,
            user=self.database.user,
            password=self.database.pword,
            database=self.database.db_name
        )
        
        cursor = database.cursor()  # Create a cursor to interact with the database
        
        # remove trailing semi-colons - important if passing both queries in a single query to sql server
        studentQuery = self.removeSemiColon(studentQuery)
        modalQuery = self.removeSemiColon(modalQuery)
        
        """The below is a place holder for until I figure out mysql which can't do MINUS or 
        EXCEPT and gets angry if you put more than one column in a nested table and needs you to name every 
        derived table and everyone on the internet has differently complicated ideas that don't work"""
        
        try: 
            cursor.execute(studentQuery)
            studentAnswer = cursor.fetchall()
            # Feedback to let the user know the query they entered did run. Displayed if 
            # answers do not match.
            validity = "The output generated by your query does not match the expected output."
        except: # if the studentAnswer causes the server to throw an error
            studentAnswer = ""
            # Feedback to let the user know the query they entered is not valid. Displayed if 
            # answers do not match.
            validity="The entered query is invalid. Look carefully at your syntax, and ensure names are spelt correctly and exist in the database."
        
        cursor.execute(modalQuery)
        modalAnswer = cursor.fetchall()
        # print(modalQuery)
        # for i in modalAnswer:
        #     print(i)
        #     # i = i.split(",")
        #     # for j in modalAnswer[i]:
        #     #     print(j)
        
        if (studentAnswer==modalAnswer): # correct! Identical output
            return [True, "Your query produced the correct output.", modalAnswer]
        
        return [False, validity, modalAnswer] # output not the same 
        

    """
    Remove the semi-colon from the end of the entered query if it has one.
    This is to prevent problems with the marker syntax.
    """
    def removeSemiColon(self, query):
        if query.endswith(';'):  # if it ends with a semi-colon, remove it
            return query.rstrip(';') # 
        return query # if it doesn't end with a semi-colon, just return the query
